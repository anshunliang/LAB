# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'datab.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys,queue,time
from PyQt5 import QtCore
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QLabel, QHBoxLayout, QVBoxLayout,QLineEdit


class Ui_MainWindow(object):
    def __init__(self):          
        super(Ui_MainWindow, self).__init__() 
        self.sub_thread = subThread()
        self.sub_thread.sub_signal.connect(self.set_label_func)
    def open(self):
        print("fffgg")
        #自动开始线程
        self.sub_thread.is_on = True         # 5
        self.sub_thread.start()
        self.show()
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(250, 280, 72, 15))
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "TextLabel"))

    
    #接收到子线程信号的处理函数,在子窗口显示反馈信息
    def set_label_func(self, fs0,fs1):
        
        self.label.setText(fs1)
        
#子窗口用于刷新信号的线程

class subThread(QThread):
    #定义线程传递的信号
    sub_signal = pyqtSignal(str,str)

    def __init__(self):
        super(subThread, self).__init__()

    def run(self):
        a=1
        while self.is_on:   # 2
            self.sub_signal.emit("world",str(a))  #发送获取的值,用于更新子窗口的数
            a=a+1
            time.sleep(1)